{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6203eb4a-1b83-4cbf-a601-6ee23a275f28",
   "metadata": {},
   "source": [
    "# Google Data Analytics Course - Capstone Project (January 2025)\n",
    "## Case study: How does a bike-share navigate speedy success?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1bdaac18-b992-429c-8ce3-42c6d5f4e6c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Purpose: this notebook contains a solution using Python for the Capstone of Google Data Analytics Professional Certificate Program from Google\n",
    "# Author: \"Carla Cotas\"\n",
    "# Date: \"09.Jan.2025\"\n",
    "# Version: 1.0"
   ]
  },
  {
   "attachments": {
    "19776df7-0a9e-40b7-ae31-268333525330.jpg": {
     "image/jpeg": ""
    }
   },
   "cell_type": "markdown",
   "id": "82afda9e-a3cf-4404-ba0d-43e94c63edf8",
   "metadata": {},
   "source": [
    "![dulcey-lima-SaXVkuoJIVs-unsplash (1).jpg](attachment:19776df7-0a9e-40b7-ae31-268333525330.jpg)\n",
    "\n",
    "Foto de <a href=\"https://unsplash.com/pt-br/@dulceylima?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Dulcey Lima</a> na <a href=\"https://unsplash.com/pt-br/fotografias/uma-fileira-de-bicicletas-azuis-estacionadas-uma-ao-lado-da-outra-SaXVkuoJIVs?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2d0a11d0-590b-4965-953d-a101c1f1278c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#python packages\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d5b2e32-7d24-4b98-ac99-b89d01f2f292",
   "metadata": {},
   "source": [
    "## Prepare"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4a18678-0309-4c7e-816d-93cab63cd2b5",
   "metadata": {},
   "source": [
    "### Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb13ebe8-7ab3-4c1c-8c0a-115b734934ba",
   "metadata": {},
   "source": [
    "For this project, there are 12 original .CSV data files (‘202401-divvy-tripdata.csv’ to ‘202412-divvy-tripdata.csv’), corresponding to data from January to December 2024. For the first step, the 12 original .CSV data files are imported.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13595902-a69e-4663-8571-c01494dec794",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Importing original data files completed!\n"
     ]
    }
   ],
   "source": [
    "#import the original data files\n",
    "\n",
    "CyclisticTripData_2024_01 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202401-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_02 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202402-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_03 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202403-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_04 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202404-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_05 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202405-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_06 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202406-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_07 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202407-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_08 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202408-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_09 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202409-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_10 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202410-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_11 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202411-divvy-tripdata.csv')\n",
    "CyclisticTripData_2024_12 = pd.read_csv('~/projects/CapstoneGoogleDACourse_January2025/1.OriginalData/202412-divvy-tripdata.csv')\n",
    "\n",
    "print('Importing original data files completed!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "284b99a9-b6ed-47c1-b5c1-cb1d6b1e4976",
   "metadata": {},
   "source": [
    "Next, a summary of each dataframe about structure and information is obtained."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7f00b759-10e6-4cc7-81ee-7bee7b7cd999",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 144873 entries, 0 to 144872\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             144873 non-null  object \n",
      " 1   rideable_type       144873 non-null  object \n",
      " 2   started_at          144873 non-null  object \n",
      " 3   ended_at            144873 non-null  object \n",
      " 4   start_station_name  125708 non-null  object \n",
      " 5   start_station_id    125708 non-null  object \n",
      " 6   end_station_name    124124 non-null  object \n",
      " 7   end_station_id      124124 non-null  object \n",
      " 8   start_lat           144873 non-null  float64\n",
      " 9   start_lng           144873 non-null  float64\n",
      " 10  end_lat             144585 non-null  float64\n",
      " 11  end_lng             144585 non-null  float64\n",
      " 12  member_casual       144873 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 14.4+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_01.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "334ee0f4-b4eb-4a34-b78c-fc652733f0c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 223164 entries, 0 to 223163\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             223164 non-null  object \n",
      " 1   rideable_type       223164 non-null  object \n",
      " 2   started_at          223164 non-null  object \n",
      " 3   ended_at            223164 non-null  object \n",
      " 4   start_station_name  199746 non-null  object \n",
      " 5   start_station_id    199746 non-null  object \n",
      " 6   end_station_name    198013 non-null  object \n",
      " 7   end_station_id      198013 non-null  object \n",
      " 8   start_lat           223164 non-null  float64\n",
      " 9   start_lng           223164 non-null  float64\n",
      " 10  end_lat             222846 non-null  float64\n",
      " 11  end_lng             222846 non-null  float64\n",
      " 12  member_casual       223164 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 22.1+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_02.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2b3d3a4a-cfb4-45a6-bce6-08ad05b92d82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 301687 entries, 0 to 301686\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             301687 non-null  object \n",
      " 1   rideable_type       301687 non-null  object \n",
      " 2   started_at          301687 non-null  object \n",
      " 3   ended_at            301687 non-null  object \n",
      " 4   start_station_name  257432 non-null  object \n",
      " 5   start_station_id    257432 non-null  object \n",
      " 6   end_station_name    254547 non-null  object \n",
      " 7   end_station_id      254547 non-null  object \n",
      " 8   start_lat           301687 non-null  float64\n",
      " 9   start_lng           301687 non-null  float64\n",
      " 10  end_lat             301291 non-null  float64\n",
      " 11  end_lng             301291 non-null  float64\n",
      " 12  member_casual       301687 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 29.9+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_03.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7071253-e19d-4db0-a259-70ec53d1b960",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 415025 entries, 0 to 415024\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             415025 non-null  object \n",
      " 1   rideable_type       415025 non-null  object \n",
      " 2   started_at          415025 non-null  object \n",
      " 3   ended_at            415025 non-null  object \n",
      " 4   start_station_name  340232 non-null  object \n",
      " 5   start_station_id    340232 non-null  object \n",
      " 6   end_station_name    336506 non-null  object \n",
      " 7   end_station_id      336506 non-null  object \n",
      " 8   start_lat           415025 non-null  float64\n",
      " 9   start_lng           415025 non-null  float64\n",
      " 10  end_lat             414546 non-null  float64\n",
      " 11  end_lng             414546 non-null  float64\n",
      " 12  member_casual       415025 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 41.2+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_04.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "66639639-fc7f-4d2b-9d37-dd77483cb14d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 609493 entries, 0 to 609492\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             609493 non-null  object \n",
      " 1   rideable_type       609493 non-null  object \n",
      " 2   started_at          609493 non-null  object \n",
      " 3   ended_at            609493 non-null  object \n",
      " 4   start_station_name  500445 non-null  object \n",
      " 5   start_station_id    500445 non-null  object \n",
      " 6   end_station_name    496762 non-null  object \n",
      " 7   end_station_id      496762 non-null  object \n",
      " 8   start_lat           609493 non-null  float64\n",
      " 9   start_lng           609493 non-null  float64\n",
      " 10  end_lat             608709 non-null  float64\n",
      " 11  end_lng             608709 non-null  float64\n",
      " 12  member_casual       609493 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 60.5+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_05.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8f69b45b-6b4c-43ce-9022-9a4b10744789",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 710721 entries, 0 to 710720\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             710721 non-null  object \n",
      " 1   rideable_type       710721 non-null  object \n",
      " 2   started_at          710721 non-null  object \n",
      " 3   ended_at            710721 non-null  object \n",
      " 4   start_station_name  566696 non-null  object \n",
      " 5   start_station_id    566696 non-null  object \n",
      " 6   end_station_name    562694 non-null  object \n",
      " 7   end_station_id      562694 non-null  object \n",
      " 8   start_lat           710721 non-null  float64\n",
      " 9   start_lng           710721 non-null  float64\n",
      " 10  end_lat             709597 non-null  float64\n",
      " 11  end_lng             709597 non-null  float64\n",
      " 12  member_casual       710721 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 70.5+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_06.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8d8e2e07-eae9-4ad0-a817-3b07ed4ff2f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 748962 entries, 0 to 748961\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             748962 non-null  object \n",
      " 1   rideable_type       748962 non-null  object \n",
      " 2   started_at          748962 non-null  object \n",
      " 3   ended_at            748962 non-null  object \n",
      " 4   start_station_name  611997 non-null  object \n",
      " 5   start_station_id    611997 non-null  object \n",
      " 6   end_station_name    609738 non-null  object \n",
      " 7   end_station_id      609738 non-null  object \n",
      " 8   start_lat           748962 non-null  float64\n",
      " 9   start_lng           748962 non-null  float64\n",
      " 10  end_lat             747871 non-null  float64\n",
      " 11  end_lng             747871 non-null  float64\n",
      " 12  member_casual       748962 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 74.3+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_07.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "db9a1bf4-fd76-41f8-9fc2-ada822c1f185",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 755639 entries, 0 to 755638\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             755639 non-null  object \n",
      " 1   rideable_type       755639 non-null  object \n",
      " 2   started_at          755639 non-null  object \n",
      " 3   ended_at            755639 non-null  object \n",
      " 4   start_station_name  615048 non-null  object \n",
      " 5   start_station_id    615048 non-null  object \n",
      " 6   end_station_name    613414 non-null  object \n",
      " 7   end_station_id      613414 non-null  object \n",
      " 8   start_lat           755639 non-null  float64\n",
      " 9   start_lng           755639 non-null  float64\n",
      " 10  end_lat             754612 non-null  float64\n",
      " 11  end_lng             754612 non-null  float64\n",
      " 12  member_casual       755639 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 74.9+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_08.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cd9403ce-0e6e-411f-87cb-418ed5e2e70a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 821276 entries, 0 to 821275\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             821276 non-null  object \n",
      " 1   rideable_type       821276 non-null  object \n",
      " 2   started_at          821276 non-null  object \n",
      " 3   ended_at            821276 non-null  object \n",
      " 4   start_station_name  632126 non-null  object \n",
      " 5   start_station_id    632126 non-null  object \n",
      " 6   end_station_name    628326 non-null  object \n",
      " 7   end_station_id      628326 non-null  object \n",
      " 8   start_lat           821276 non-null  float64\n",
      " 9   start_lng           821276 non-null  float64\n",
      " 10  end_lat             820523 non-null  float64\n",
      " 11  end_lng             820523 non-null  float64\n",
      " 12  member_casual       821276 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 81.5+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_09.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dd5f0912-5d51-426a-987e-eed99d3ac832",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 616281 entries, 0 to 616280\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             616281 non-null  object \n",
      " 1   rideable_type       616281 non-null  object \n",
      " 2   started_at          616281 non-null  object \n",
      " 3   ended_at            616281 non-null  object \n",
      " 4   start_station_name  509134 non-null  object \n",
      " 5   start_station_id    509134 non-null  object \n",
      " 6   end_station_name    506764 non-null  object \n",
      " 7   end_station_id      506764 non-null  object \n",
      " 8   start_lat           616281 non-null  float64\n",
      " 9   start_lng           616281 non-null  float64\n",
      " 10  end_lat             615713 non-null  float64\n",
      " 11  end_lng             615713 non-null  float64\n",
      " 12  member_casual       616281 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 61.1+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_10.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "919a79b7-8fda-44e2-aa99-493cda33764c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 335075 entries, 0 to 335074\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             335075 non-null  object \n",
      " 1   rideable_type       335075 non-null  object \n",
      " 2   started_at          335075 non-null  object \n",
      " 3   ended_at            335075 non-null  object \n",
      " 4   start_station_name  278872 non-null  object \n",
      " 5   start_station_id    278872 non-null  object \n",
      " 6   end_station_name    277431 non-null  object \n",
      " 7   end_station_id      277431 non-null  object \n",
      " 8   start_lat           335075 non-null  float64\n",
      " 9   start_lng           335075 non-null  float64\n",
      " 10  end_lat             334802 non-null  float64\n",
      " 11  end_lng             334802 non-null  float64\n",
      " 12  member_casual       335075 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 33.2+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_11.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e6396d75-1e47-47e2-9c12-3f53f9351d59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 178372 entries, 0 to 178371\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   ride_id             178372 non-null  object \n",
      " 1   rideable_type       178372 non-null  object \n",
      " 2   started_at          178372 non-null  object \n",
      " 3   ended_at            178372 non-null  object \n",
      " 4   start_station_name  149181 non-null  object \n",
      " 5   start_station_id    149181 non-null  object \n",
      " 6   end_station_name    147596 non-null  object \n",
      " 7   end_station_id      147596 non-null  object \n",
      " 8   start_lat           178372 non-null  float64\n",
      " 9   start_lng           178372 non-null  float64\n",
      " 10  end_lat             178241 non-null  float64\n",
      " 11  end_lng             178241 non-null  float64\n",
      " 12  member_casual       178372 non-null  object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 17.7+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData_2024_12.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7815665d-b245-414a-8d2e-5271b3a57028",
   "metadata": {},
   "source": [
    "### Process"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7b1be2e-4aa0-4e6d-8a6f-0b78ca733734",
   "metadata": {},
   "source": [
    "In this step, the 12 dataframes are combined into one dataframe, clean it and manipulate it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "188a981a-c0bc-402b-8fa6-c7537c7454e0",
   "metadata": {},
   "source": [
    "#### Data cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0ee3dcf-b472-4822-95cb-b8f23d46d4d0",
   "metadata": {},
   "source": [
    "The 12 dataframes are combined into only one dataframe for analyzing 12 months of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0612812a-1995-4af7-9367-a1be1c316a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "#combining the 12 dataframes into only 1 dataframe\n",
    "\n",
    "dataframes = [CyclisticTripData_2024_01, CyclisticTripData_2024_02, CyclisticTripData_2024_03, \n",
    "              CyclisticTripData_2024_04, CyclisticTripData_2024_05, CyclisticTripData_2024_06,\n",
    "              CyclisticTripData_2024_07, CyclisticTripData_2024_08, CyclisticTripData_2024_09,\n",
    "              CyclisticTripData_2024_10, CyclisticTripData_2024_11, CyclisticTripData_2024_12]\n",
    "CyclisticTripData = pd.concat(dataframes, ignore_index=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcb34608-6f26-4a24-8a2c-db7c8d884ff2",
   "metadata": {},
   "source": [
    "The large dataframe can be verified to check very quickly uniformities and to get a better data sensitivity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3a4ea27d-3367-4b90-854a-7aa72827e1ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5860568 entries, 0 to 5860567\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Dtype  \n",
      "---  ------              -----  \n",
      " 0   ride_id             object \n",
      " 1   rideable_type       object \n",
      " 2   started_at          object \n",
      " 3   ended_at            object \n",
      " 4   start_station_name  object \n",
      " 5   start_station_id    object \n",
      " 6   end_station_name    object \n",
      " 7   end_station_id      object \n",
      " 8   start_lat           float64\n",
      " 9   start_lng           float64\n",
      " 10  end_lat             float64\n",
      " 11  end_lng             float64\n",
      " 12  member_casual       object \n",
      "dtypes: float64(4), object(9)\n",
      "memory usage: 581.3+ MB\n"
     ]
    }
   ],
   "source": [
    "CyclisticTripData.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c42e0164-11ae-4916-8291-5d772fabfc22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5860568, 13)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "42d35286-9852-4848-b562-755f65150f2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ride_id', 'rideable_type', 'started_at', 'ended_at',\n",
       "       'start_station_name', 'start_station_id', 'end_station_name',\n",
       "       'end_station_id', 'start_lat', 'start_lng', 'end_lat', 'end_lng',\n",
       "       'member_casual'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "895b6567-de5a-4fb6-bf98-5318a6c68bd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C1D650626C8C899A</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-12 15:30:27</td>\n",
       "      <td>2024-01-12 15:37:59</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.903267</td>\n",
       "      <td>-87.634737</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>EECD38BDB25BFCB0</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-08 15:45:46</td>\n",
       "      <td>2024-01-08 15:52:59</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.902937</td>\n",
       "      <td>-87.634440</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F4A9CE78061F17F7</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-27 12:27:19</td>\n",
       "      <td>2024-01-27 12:35:19</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.902951</td>\n",
       "      <td>-87.634470</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0A0D9E15EE50B171</td>\n",
       "      <td>classic_bike</td>\n",
       "      <td>2024-01-29 16:26:17</td>\n",
       "      <td>2024-01-29 16:56:06</td>\n",
       "      <td>Wells St &amp; Randolph St</td>\n",
       "      <td>TA1305000030</td>\n",
       "      <td>Larrabee St &amp; Webster Ave</td>\n",
       "      <td>13193</td>\n",
       "      <td>41.884295</td>\n",
       "      <td>-87.633963</td>\n",
       "      <td>41.921822</td>\n",
       "      <td>-87.644140</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33FFC9805E3EFF9A</td>\n",
       "      <td>classic_bike</td>\n",
       "      <td>2024-01-31 05:43:23</td>\n",
       "      <td>2024-01-31 06:09:35</td>\n",
       "      <td>Lincoln Ave &amp; Waveland Ave</td>\n",
       "      <td>13253</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.948797</td>\n",
       "      <td>-87.675278</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type           started_at             ended_at  \\\n",
       "0  C1D650626C8C899A  electric_bike  2024-01-12 15:30:27  2024-01-12 15:37:59   \n",
       "1  EECD38BDB25BFCB0  electric_bike  2024-01-08 15:45:46  2024-01-08 15:52:59   \n",
       "2  F4A9CE78061F17F7  electric_bike  2024-01-27 12:27:19  2024-01-27 12:35:19   \n",
       "3  0A0D9E15EE50B171   classic_bike  2024-01-29 16:26:17  2024-01-29 16:56:06   \n",
       "4  33FFC9805E3EFF9A   classic_bike  2024-01-31 05:43:23  2024-01-31 06:09:35   \n",
       "\n",
       "           start_station_name start_station_id           end_station_name  \\\n",
       "0           Wells St & Elm St     KA1504000135   Kingsbury St & Kinzie St   \n",
       "1           Wells St & Elm St     KA1504000135   Kingsbury St & Kinzie St   \n",
       "2           Wells St & Elm St     KA1504000135   Kingsbury St & Kinzie St   \n",
       "3      Wells St & Randolph St     TA1305000030  Larrabee St & Webster Ave   \n",
       "4  Lincoln Ave & Waveland Ave            13253   Kingsbury St & Kinzie St   \n",
       "\n",
       "  end_station_id  start_lat  start_lng    end_lat    end_lng member_casual  \n",
       "0   KA1503000043  41.903267 -87.634737  41.889177 -87.638506        member  \n",
       "1   KA1503000043  41.902937 -87.634440  41.889177 -87.638506        member  \n",
       "2   KA1503000043  41.902951 -87.634470  41.889177 -87.638506        member  \n",
       "3          13193  41.884295 -87.633963  41.921822 -87.644140        member  \n",
       "4   KA1503000043  41.948797 -87.675278  41.889177 -87.638506        member  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "96374950-81fd-43c9-8eb1-51b154eb297c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5860563</th>\n",
       "      <td>BD56BA20F42E4794</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-11 08:23:46.564</td>\n",
       "      <td>2024-12-11 08:37:34.532</td>\n",
       "      <td>Clybourn Ave &amp; Division St</td>\n",
       "      <td>TA1307000115</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.904634</td>\n",
       "      <td>-87.640518</td>\n",
       "      <td>41.880000</td>\n",
       "      <td>-87.630000</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860564</th>\n",
       "      <td>3074643A6B60B300</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-09 12:26:15.677</td>\n",
       "      <td>2024-12-09 12:37:32.712</td>\n",
       "      <td>Canal St &amp; Jackson Blvd</td>\n",
       "      <td>13138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.878125</td>\n",
       "      <td>-87.639968</td>\n",
       "      <td>41.900000</td>\n",
       "      <td>-87.620000</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860565</th>\n",
       "      <td>15602635C5DF484E</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-31 17:10:03.113</td>\n",
       "      <td>2024-12-31 17:17:21.838</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860566</th>\n",
       "      <td>F15ABBA961560B75</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-01 14:39:47.216</td>\n",
       "      <td>2024-12-01 14:45:21.268</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914003</td>\n",
       "      <td>-87.705099</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860567</th>\n",
       "      <td>8AF273287533B527</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-17 06:38:32.320</td>\n",
       "      <td>2024-12-17 06:46:27.167</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.920000</td>\n",
       "      <td>-87.690000</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ride_id  rideable_type               started_at  \\\n",
       "5860563  BD56BA20F42E4794  electric_bike  2024-12-11 08:23:46.564   \n",
       "5860564  3074643A6B60B300  electric_bike  2024-12-09 12:26:15.677   \n",
       "5860565  15602635C5DF484E  electric_bike  2024-12-31 17:10:03.113   \n",
       "5860566  F15ABBA961560B75  electric_bike  2024-12-01 14:39:47.216   \n",
       "5860567  8AF273287533B527  electric_bike  2024-12-17 06:38:32.320   \n",
       "\n",
       "                        ended_at             start_station_name  \\\n",
       "5860563  2024-12-11 08:37:34.532     Clybourn Ave & Division St   \n",
       "5860564  2024-12-09 12:37:32.712        Canal St & Jackson Blvd   \n",
       "5860565  2024-12-31 17:17:21.838  Albany Ave & Bloomingdale Ave   \n",
       "5860566  2024-12-01 14:45:21.268  Albany Ave & Bloomingdale Ave   \n",
       "5860567  2024-12-17 06:46:27.167  Albany Ave & Bloomingdale Ave   \n",
       "\n",
       "        start_station_id                end_station_name end_station_id  \\\n",
       "5860563     TA1307000115                             NaN            NaN   \n",
       "5860564            13138                             NaN            NaN   \n",
       "5860565            15655  California Ave & Milwaukee Ave          13084   \n",
       "5860566            15655  California Ave & Milwaukee Ave          13084   \n",
       "5860567            15655                             NaN            NaN   \n",
       "\n",
       "         start_lat  start_lng    end_lat    end_lng member_casual  \n",
       "5860563  41.904634 -87.640518  41.880000 -87.630000        member  \n",
       "5860564  41.878125 -87.639968  41.900000 -87.620000        member  \n",
       "5860565  41.914027 -87.705126  41.922695 -87.697153        member  \n",
       "5860566  41.914003 -87.705099  41.922695 -87.697153        member  \n",
       "5860567  41.914027 -87.705126  41.920000 -87.690000        member  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47e4c08c-8890-4055-98a7-0b74dd8876a3",
   "metadata": {},
   "source": [
    "At this point, the large dataframe is exported to .CSV for a saved version."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c60c5454-517a-4574-8491-bd86f17bab42",
   "metadata": {},
   "outputs": [],
   "source": [
    "CyclisticTripData.to_csv('~/projects/CapstoneGoogleDACourse_January2025/2.PreparedData/20250205_CyclisticTripData.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9cf7d5c-ebc8-4e40-8eb1-c917e2a265cc",
   "metadata": {},
   "source": [
    "#### Data manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c7573b1-72b2-493c-ad5d-c70e26cef5ec",
   "metadata": {},
   "source": [
    "In this step, a closer look at data is taken to check for duplicates, null values, and inconsistency on values that needs to be cleaned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "afdf9f8c-85d1-4df3-bbd6-6bbbca2dc62c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of duplicate ride_id: 211\n",
      "Duplicate Observations:                   ride_id  rideable_type               started_at  \\\n",
      "1697610  3B5CE4D8B3EE6ED8  electric_bike  2024-05-31 23:50:04.153   \n",
      "1697634  60B4DDFF369931B2  electric_bike  2024-05-31 23:51:07.398   \n",
      "1697659  1D8856396862BE62  electric_bike  2024-05-31 23:56:12.241   \n",
      "1698918  B1B9E66D2E7C383D   classic_bike  2024-05-31 11:50:26.806   \n",
      "1702774  9FF6FFB668739B47  electric_bike  2024-05-31 23:53:26.419   \n",
      "...                   ...            ...                      ...   \n",
      "2397298  2C2CD7C3DCBC3C39   classic_bike  2024-05-31 01:09:43.561   \n",
      "2399469  532780A49B9089CD  electric_bike  2024-05-31 23:57:45.184   \n",
      "2400500  9B43F7CB54CFB914  electric_bike  2024-05-31 23:34:26.101   \n",
      "2401823  7817F106775A6E24   classic_bike  2024-05-31 18:01:22.459   \n",
      "2402847  A5CEDF5535693FFB  electric_bike  2024-05-31 23:31:22.041   \n",
      "\n",
      "                        ended_at                        start_station_name  \\\n",
      "1697610  2024-06-01 00:06:08.273                                       NaN   \n",
      "1697634  2024-06-01 00:25:37.453                                       NaN   \n",
      "1697659  2024-06-01 00:10:02.667            California Ave & Milwaukee Ave   \n",
      "1698918  2024-06-01 09:52:57.046                  Austin Blvd & Madison St   \n",
      "1702774  2024-06-01 00:04:05.504               Halsted St & Wrightwood Ave   \n",
      "...                          ...                                       ...   \n",
      "2397298  2024-06-01 02:09:36.476                     Michigan Ave & 8th St   \n",
      "2399469  2024-06-01 00:13:39.363  Public Rack - Garfield Park Conservatory   \n",
      "2400500  2024-06-01 00:11:15.263                  Loomis St & Lexington St   \n",
      "2401823  2024-06-01 19:01:14.075                     Wells St & Concord Ln   \n",
      "2402847  2024-06-01 00:01:09.381                   Lake Park Ave & 53rd St   \n",
      "\n",
      "        start_station_id                      end_station_name end_station_id  \\\n",
      "1697610              NaN                                   NaN            NaN   \n",
      "1697634              NaN                                   NaN            NaN   \n",
      "1697659            13084                                   NaN            NaN   \n",
      "1698918            16918              Austin Blvd & Madison St          16918   \n",
      "1702774     TA1309000061  Orleans St & Chestnut St (NEXT Apts)            620   \n",
      "...                  ...                                   ...            ...   \n",
      "2397298              623                                   NaN            NaN   \n",
      "2399469             1059                                   NaN            NaN   \n",
      "2400500            13332                                   NaN            NaN   \n",
      "2401823     TA1308000050                                   NaN            NaN   \n",
      "2402847     KA1503000059                                   NaN            NaN   \n",
      "\n",
      "         start_lat  start_lng    end_lat    end_lng member_casual  \n",
      "1697610  41.980000 -87.670000  41.980000 -87.670000        casual  \n",
      "1697634  41.880000 -87.650000  41.970000 -87.680000        casual  \n",
      "1697659  41.922714 -87.697154  41.930000 -87.720000        casual  \n",
      "1698918  41.880281 -87.774453  41.880281 -87.774453        casual  \n",
      "1702774  41.929208 -87.649222  41.898203 -87.637536        member  \n",
      "...            ...        ...        ...        ...           ...  \n",
      "2397298  41.872773 -87.623981        NaN        NaN        casual  \n",
      "2399469  41.886529 -87.716723  41.890000 -87.770000        casual  \n",
      "2400500  41.872167 -87.661361  41.870000 -87.660000        member  \n",
      "2401823  41.912133 -87.634656        NaN        NaN        casual  \n",
      "2402847  41.799560 -87.586457  41.770000 -87.570000        casual  \n",
      "\n",
      "[211 rows x 13 columns]\n"
     ]
    }
   ],
   "source": [
    "#find 'ride_id' DUPLICATES\n",
    "\n",
    "duplicate_number = CyclisticTripData['ride_id'].duplicated().sum()\n",
    "duplicate = CyclisticTripData[CyclisticTripData['ride_id'].duplicated()]\n",
    "\n",
    "print(\"Number of duplicate ride_id:\", duplicate_number)\n",
    "print(\"Duplicate Observations:\", duplicate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5af380d5-f3f1-48eb-85fc-c261e6b1d2b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1371233</th>\n",
       "      <td>A5CEDF5535693FFB</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-05-31 23:31:22</td>\n",
       "      <td>2024-06-01 00:01:09</td>\n",
       "      <td>Lake Park Ave &amp; 53rd St</td>\n",
       "      <td>KA1503000059</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.79956</td>\n",
       "      <td>-87.586457</td>\n",
       "      <td>41.77</td>\n",
       "      <td>-87.57</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2402847</th>\n",
       "      <td>A5CEDF5535693FFB</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-05-31 23:31:22.041</td>\n",
       "      <td>2024-06-01 00:01:09.381</td>\n",
       "      <td>Lake Park Ave &amp; 53rd St</td>\n",
       "      <td>KA1503000059</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.79956</td>\n",
       "      <td>-87.586457</td>\n",
       "      <td>41.77</td>\n",
       "      <td>-87.57</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ride_id  rideable_type               started_at  \\\n",
       "1371233  A5CEDF5535693FFB  electric_bike      2024-05-31 23:31:22   \n",
       "2402847  A5CEDF5535693FFB  electric_bike  2024-05-31 23:31:22.041   \n",
       "\n",
       "                        ended_at       start_station_name start_station_id  \\\n",
       "1371233      2024-06-01 00:01:09  Lake Park Ave & 53rd St     KA1503000059   \n",
       "2402847  2024-06-01 00:01:09.381  Lake Park Ave & 53rd St     KA1503000059   \n",
       "\n",
       "        end_station_name end_station_id  start_lat  start_lng  end_lat  \\\n",
       "1371233              NaN            NaN   41.79956 -87.586457    41.77   \n",
       "2402847              NaN            NaN   41.79956 -87.586457    41.77   \n",
       "\n",
       "         end_lng member_casual  \n",
       "1371233   -87.57        casual  \n",
       "2402847   -87.57        casual  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check and review duplicate values\n",
    "\n",
    "print(CyclisticTripData['ride_id'][CyclisticTripData['ride_id'] == 'A5CEDF5535693FFB'].count())\n",
    "CyclisticTripData.loc[CyclisticTripData['ride_id'] == 'A5CEDF5535693FFB']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7f830250-c0ec-402c-878e-6b2eb406b47a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Note: after a careful checking, it was verified that the duplicate values, 211 duplicate observations, are values on the original data recorded on \n",
    "# 'CyclisticTripData_2024_05' and duplicated on 'CyclisticTripData_2024_06' corresponding to rides started at 2024-05-31 and finished at 2024-06-01\n",
    "# with started_at and ended_at following YYYY-MM-DD HH:MM:SS - 'CyclisticTripData_2024_05'\n",
    "# and, started_at and ended_at following YYYY-MM-DD HH:MM:SS.SSS - 'CyclisticTripData_2024_06'\n",
    "\n",
    "# It was noted here that the time format is not consistent across all observations! "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "967f3e8f-96a9-4445-b800-c935a6fe92b5",
   "metadata": {},
   "source": [
    "The next step is to uniformize the date format to match HH:MM:SS considering the purpose of the analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8cd718eb-50ae-4053-a52c-50c6341b38e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#uniformize the date format to match HH:MM:SS\n",
    "\n",
    "CyclisticTripData[['started_at_copy', 'ended_at_copy']] = CyclisticTripData[['started_at', 'ended_at']]\n",
    "CyclisticTripData[['started_at', 'ended_at']] = CyclisticTripData[['started_at', 'ended_at']].apply(lambda x: pd.to_datetime(x, format='mixed').dt.strftime('%Y-%m-%d %H:%M:%S'))\n",
    "CyclisticTripData = CyclisticTripData.drop(['started_at_copy', 'ended_at_copy'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2727c800-8c91-4f43-9dfd-628e70beb368",
   "metadata": {},
   "source": [
    "And, then get only one record for each duplicate.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2ccbad5e-624a-434c-ae66-4b8bbbc06162",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicate rows removed: 211\n"
     ]
    }
   ],
   "source": [
    "#keep one record for each duplicate\n",
    "\n",
    "count_row_initial = CyclisticTripData.shape[0]\n",
    "CyclisticTripData = CyclisticTripData.drop_duplicates(keep='first')\n",
    "count_row_keep_one = CyclisticTripData.shape[0]\n",
    "\n",
    "print('Duplicate rows removed:', count_row_initial - count_row_keep_one)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "52e3b6a2-d53c-450f-bc87-20d3a5ae3ca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5860357, 13)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.shape\n",
    "#initial without managing duplicates: (5860568, 13)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b60a5ce-c953-46fc-8ac8-faa3a43a4daf",
   "metadata": {},
   "source": [
    "Next, a closer look at data with unique observations is taken to check for null or empty cells."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ed7c81ca-e535-41fa-867f-2b04f64a4467",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NaN values in each column: ride_id                     0\n",
      "rideable_type               0\n",
      "started_at                  0\n",
      "ended_at                    0\n",
      "start_station_name    1073928\n",
      "start_station_id      1073928\n",
      "end_station_name      1104573\n",
      "end_station_id        1104573\n",
      "start_lat                   0\n",
      "start_lng                   0\n",
      "end_lat                  7192\n",
      "end_lng                  7192\n",
      "member_casual               0\n",
      "dtype: int64\n",
      "Number of null values in each column: ride_id                     0\n",
      "rideable_type               0\n",
      "started_at                  0\n",
      "ended_at                    0\n",
      "start_station_name    1073928\n",
      "start_station_id      1073928\n",
      "end_station_name      1104573\n",
      "end_station_id        1104573\n",
      "start_lat                   0\n",
      "start_lng                   0\n",
      "end_lat                  7192\n",
      "end_lng                  7192\n",
      "member_casual               0\n",
      "dtype: int64\n",
      "Number of NaN values: 4371386\n",
      "Number of null values: 4371386\n"
     ]
    }
   ],
   "source": [
    "#check for null or empty cells\n",
    "\n",
    "nan_count = CyclisticTripData.isna().sum().sum()\n",
    "null_count = CyclisticTripData.isnull().sum().sum()\n",
    "nan_count_column = CyclisticTripData.isna().sum()\n",
    "null_count_column = CyclisticTripData.isnull().sum()\n",
    "\n",
    "print('Number of NaN values in each column:', nan_count_column)\n",
    "print('Number of null values in each column:', null_count_column)\n",
    "print('Number of NaN values:', nan_count)\n",
    "print('Number of null values:', null_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d0cf8c53-c875-40d8-8f79-008f7b796617",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>75478</th>\n",
       "      <td>4894BC9BB641DE11</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-18 11:51:18</td>\n",
       "      <td>2024-01-18 11:55:20</td>\n",
       "      <td>Clark St &amp; Randolph St</td>\n",
       "      <td>TA1305000030</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.884833</td>\n",
       "      <td>-87.631041</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75479</th>\n",
       "      <td>78ECA66C0220B06A</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-23 14:56:44</td>\n",
       "      <td>2024-01-23 15:01:33</td>\n",
       "      <td>Blackstone Ave &amp; 59th St</td>\n",
       "      <td>22004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.787934</td>\n",
       "      <td>-87.590636</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.59</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75480</th>\n",
       "      <td>77849CAAC7DF23F0</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-05 17:21:54</td>\n",
       "      <td>2024-01-05 17:22:04</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.903237</td>\n",
       "      <td>-87.634504</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75481</th>\n",
       "      <td>EBCA645250D0E8EF</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-05 17:20:07</td>\n",
       "      <td>2024-01-05 17:20:46</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.903166</td>\n",
       "      <td>-87.634389</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75482</th>\n",
       "      <td>10B5B9E90B3CA790</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-25 16:28:04</td>\n",
       "      <td>2024-01-25 16:31:19</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.902844</td>\n",
       "      <td>-87.634469</td>\n",
       "      <td>41.91</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860558</th>\n",
       "      <td>E459A45EDDD3ACCC</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-24 16:45:22</td>\n",
       "      <td>2024-12-24 17:19:30</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.914015</td>\n",
       "      <td>-87.705145</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860560</th>\n",
       "      <td>5C7B87E9C5B114FB</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-10 14:20:40</td>\n",
       "      <td>2024-12-10 14:33:09</td>\n",
       "      <td>Canal St &amp; Jackson Blvd</td>\n",
       "      <td>13138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.878125</td>\n",
       "      <td>-87.639968</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.66</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860563</th>\n",
       "      <td>BD56BA20F42E4794</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-11 08:23:46</td>\n",
       "      <td>2024-12-11 08:37:34</td>\n",
       "      <td>Clybourn Ave &amp; Division St</td>\n",
       "      <td>TA1307000115</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.904634</td>\n",
       "      <td>-87.640518</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860564</th>\n",
       "      <td>3074643A6B60B300</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-09 12:26:15</td>\n",
       "      <td>2024-12-09 12:37:32</td>\n",
       "      <td>Canal St &amp; Jackson Blvd</td>\n",
       "      <td>13138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.878125</td>\n",
       "      <td>-87.639968</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.62</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860567</th>\n",
       "      <td>8AF273287533B527</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-17 06:38:32</td>\n",
       "      <td>2024-12-17 06:46:27</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.92</td>\n",
       "      <td>-87.69</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1652169 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ride_id  rideable_type           started_at  \\\n",
       "75478    4894BC9BB641DE11  electric_bike  2024-01-18 11:51:18   \n",
       "75479    78ECA66C0220B06A  electric_bike  2024-01-23 14:56:44   \n",
       "75480    77849CAAC7DF23F0  electric_bike  2024-01-05 17:21:54   \n",
       "75481    EBCA645250D0E8EF  electric_bike  2024-01-05 17:20:07   \n",
       "75482    10B5B9E90B3CA790  electric_bike  2024-01-25 16:28:04   \n",
       "...                   ...            ...                  ...   \n",
       "5860558  E459A45EDDD3ACCC  electric_bike  2024-12-24 16:45:22   \n",
       "5860560  5C7B87E9C5B114FB  electric_bike  2024-12-10 14:20:40   \n",
       "5860563  BD56BA20F42E4794  electric_bike  2024-12-11 08:23:46   \n",
       "5860564  3074643A6B60B300  electric_bike  2024-12-09 12:26:15   \n",
       "5860567  8AF273287533B527  electric_bike  2024-12-17 06:38:32   \n",
       "\n",
       "                    ended_at             start_station_name start_station_id  \\\n",
       "75478    2024-01-18 11:55:20         Clark St & Randolph St     TA1305000030   \n",
       "75479    2024-01-23 15:01:33       Blackstone Ave & 59th St            22004   \n",
       "75480    2024-01-05 17:22:04              Wells St & Elm St     KA1504000135   \n",
       "75481    2024-01-05 17:20:46              Wells St & Elm St     KA1504000135   \n",
       "75482    2024-01-25 16:31:19              Wells St & Elm St     KA1504000135   \n",
       "...                      ...                            ...              ...   \n",
       "5860558  2024-12-24 17:19:30  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860560  2024-12-10 14:33:09        Canal St & Jackson Blvd            13138   \n",
       "5860563  2024-12-11 08:37:34     Clybourn Ave & Division St     TA1307000115   \n",
       "5860564  2024-12-09 12:37:32        Canal St & Jackson Blvd            13138   \n",
       "5860567  2024-12-17 06:46:27  Albany Ave & Bloomingdale Ave            15655   \n",
       "\n",
       "        end_station_name end_station_id  start_lat  start_lng  end_lat  \\\n",
       "75478                NaN            NaN  41.884833 -87.631041    41.89   \n",
       "75479                NaN            NaN  41.787934 -87.590636    41.80   \n",
       "75480                NaN            NaN  41.903237 -87.634504    41.90   \n",
       "75481                NaN            NaN  41.903166 -87.634389    41.90   \n",
       "75482                NaN            NaN  41.902844 -87.634469    41.91   \n",
       "...                  ...            ...        ...        ...      ...   \n",
       "5860558              NaN            NaN  41.914015 -87.705145    41.98   \n",
       "5860560              NaN            NaN  41.878125 -87.639968    41.90   \n",
       "5860563              NaN            NaN  41.904634 -87.640518    41.88   \n",
       "5860564              NaN            NaN  41.878125 -87.639968    41.90   \n",
       "5860567              NaN            NaN  41.914027 -87.705126    41.92   \n",
       "\n",
       "         end_lng member_casual  \n",
       "75478     -87.63        member  \n",
       "75479     -87.59        member  \n",
       "75480     -87.63        member  \n",
       "75481     -87.63        member  \n",
       "75482     -87.63        member  \n",
       "...          ...           ...  \n",
       "5860558   -87.67        member  \n",
       "5860560   -87.66        member  \n",
       "5860563   -87.63        member  \n",
       "5860564   -87.62        member  \n",
       "5860567   -87.69        member  \n",
       "\n",
       "[1652169 rows x 13 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData[CyclisticTripData.isna().any(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5555b48f-3a5b-45bd-b623-aeb694bc4b33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>75478</th>\n",
       "      <td>4894BC9BB641DE11</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-18 11:51:18</td>\n",
       "      <td>2024-01-18 11:55:20</td>\n",
       "      <td>Clark St &amp; Randolph St</td>\n",
       "      <td>TA1305000030</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.884833</td>\n",
       "      <td>-87.631041</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75479</th>\n",
       "      <td>78ECA66C0220B06A</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-23 14:56:44</td>\n",
       "      <td>2024-01-23 15:01:33</td>\n",
       "      <td>Blackstone Ave &amp; 59th St</td>\n",
       "      <td>22004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.787934</td>\n",
       "      <td>-87.590636</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.59</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75480</th>\n",
       "      <td>77849CAAC7DF23F0</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-05 17:21:54</td>\n",
       "      <td>2024-01-05 17:22:04</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.903237</td>\n",
       "      <td>-87.634504</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75481</th>\n",
       "      <td>EBCA645250D0E8EF</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-05 17:20:07</td>\n",
       "      <td>2024-01-05 17:20:46</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.903166</td>\n",
       "      <td>-87.634389</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75482</th>\n",
       "      <td>10B5B9E90B3CA790</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-25 16:28:04</td>\n",
       "      <td>2024-01-25 16:31:19</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.902844</td>\n",
       "      <td>-87.634469</td>\n",
       "      <td>41.91</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860558</th>\n",
       "      <td>E459A45EDDD3ACCC</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-24 16:45:22</td>\n",
       "      <td>2024-12-24 17:19:30</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.914015</td>\n",
       "      <td>-87.705145</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860560</th>\n",
       "      <td>5C7B87E9C5B114FB</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-10 14:20:40</td>\n",
       "      <td>2024-12-10 14:33:09</td>\n",
       "      <td>Canal St &amp; Jackson Blvd</td>\n",
       "      <td>13138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.878125</td>\n",
       "      <td>-87.639968</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.66</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860563</th>\n",
       "      <td>BD56BA20F42E4794</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-11 08:23:46</td>\n",
       "      <td>2024-12-11 08:37:34</td>\n",
       "      <td>Clybourn Ave &amp; Division St</td>\n",
       "      <td>TA1307000115</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.904634</td>\n",
       "      <td>-87.640518</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860564</th>\n",
       "      <td>3074643A6B60B300</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-09 12:26:15</td>\n",
       "      <td>2024-12-09 12:37:32</td>\n",
       "      <td>Canal St &amp; Jackson Blvd</td>\n",
       "      <td>13138</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.878125</td>\n",
       "      <td>-87.639968</td>\n",
       "      <td>41.90</td>\n",
       "      <td>-87.62</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860567</th>\n",
       "      <td>8AF273287533B527</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-17 06:38:32</td>\n",
       "      <td>2024-12-17 06:46:27</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.92</td>\n",
       "      <td>-87.69</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1652169 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ride_id  rideable_type           started_at  \\\n",
       "75478    4894BC9BB641DE11  electric_bike  2024-01-18 11:51:18   \n",
       "75479    78ECA66C0220B06A  electric_bike  2024-01-23 14:56:44   \n",
       "75480    77849CAAC7DF23F0  electric_bike  2024-01-05 17:21:54   \n",
       "75481    EBCA645250D0E8EF  electric_bike  2024-01-05 17:20:07   \n",
       "75482    10B5B9E90B3CA790  electric_bike  2024-01-25 16:28:04   \n",
       "...                   ...            ...                  ...   \n",
       "5860558  E459A45EDDD3ACCC  electric_bike  2024-12-24 16:45:22   \n",
       "5860560  5C7B87E9C5B114FB  electric_bike  2024-12-10 14:20:40   \n",
       "5860563  BD56BA20F42E4794  electric_bike  2024-12-11 08:23:46   \n",
       "5860564  3074643A6B60B300  electric_bike  2024-12-09 12:26:15   \n",
       "5860567  8AF273287533B527  electric_bike  2024-12-17 06:38:32   \n",
       "\n",
       "                    ended_at             start_station_name start_station_id  \\\n",
       "75478    2024-01-18 11:55:20         Clark St & Randolph St     TA1305000030   \n",
       "75479    2024-01-23 15:01:33       Blackstone Ave & 59th St            22004   \n",
       "75480    2024-01-05 17:22:04              Wells St & Elm St     KA1504000135   \n",
       "75481    2024-01-05 17:20:46              Wells St & Elm St     KA1504000135   \n",
       "75482    2024-01-25 16:31:19              Wells St & Elm St     KA1504000135   \n",
       "...                      ...                            ...              ...   \n",
       "5860558  2024-12-24 17:19:30  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860560  2024-12-10 14:33:09        Canal St & Jackson Blvd            13138   \n",
       "5860563  2024-12-11 08:37:34     Clybourn Ave & Division St     TA1307000115   \n",
       "5860564  2024-12-09 12:37:32        Canal St & Jackson Blvd            13138   \n",
       "5860567  2024-12-17 06:46:27  Albany Ave & Bloomingdale Ave            15655   \n",
       "\n",
       "        end_station_name end_station_id  start_lat  start_lng  end_lat  \\\n",
       "75478                NaN            NaN  41.884833 -87.631041    41.89   \n",
       "75479                NaN            NaN  41.787934 -87.590636    41.80   \n",
       "75480                NaN            NaN  41.903237 -87.634504    41.90   \n",
       "75481                NaN            NaN  41.903166 -87.634389    41.90   \n",
       "75482                NaN            NaN  41.902844 -87.634469    41.91   \n",
       "...                  ...            ...        ...        ...      ...   \n",
       "5860558              NaN            NaN  41.914015 -87.705145    41.98   \n",
       "5860560              NaN            NaN  41.878125 -87.639968    41.90   \n",
       "5860563              NaN            NaN  41.904634 -87.640518    41.88   \n",
       "5860564              NaN            NaN  41.878125 -87.639968    41.90   \n",
       "5860567              NaN            NaN  41.914027 -87.705126    41.92   \n",
       "\n",
       "         end_lng member_casual  \n",
       "75478     -87.63        member  \n",
       "75479     -87.59        member  \n",
       "75480     -87.63        member  \n",
       "75481     -87.63        member  \n",
       "75482     -87.63        member  \n",
       "...          ...           ...  \n",
       "5860558   -87.67        member  \n",
       "5860560   -87.66        member  \n",
       "5860563   -87.63        member  \n",
       "5860564   -87.62        member  \n",
       "5860567   -87.69        member  \n",
       "\n",
       "[1652169 rows x 13 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData[CyclisticTripData.isnull().any(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8fc61c80-8766-436e-90fa-df161ac04c43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5860559</th>\n",
       "      <td>36DAF3C93190E07F</td>\n",
       "      <td>classic_bike</td>\n",
       "      <td>2024-12-13 15:40:06</td>\n",
       "      <td>2024-12-13 15:46:29</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860561</th>\n",
       "      <td>71F02C3CF79B8090</td>\n",
       "      <td>classic_bike</td>\n",
       "      <td>2024-12-17 08:09:12</td>\n",
       "      <td>2024-12-17 08:15:50</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860562</th>\n",
       "      <td>85AE8840FA0E4EAB</td>\n",
       "      <td>classic_bike</td>\n",
       "      <td>2024-12-18 08:22:40</td>\n",
       "      <td>2024-12-18 08:29:25</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860565</th>\n",
       "      <td>15602635C5DF484E</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-31 17:10:03</td>\n",
       "      <td>2024-12-31 17:17:21</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914027</td>\n",
       "      <td>-87.705126</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5860566</th>\n",
       "      <td>F15ABBA961560B75</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-12-01 14:39:47</td>\n",
       "      <td>2024-12-01 14:45:21</td>\n",
       "      <td>Albany Ave &amp; Bloomingdale Ave</td>\n",
       "      <td>15655</td>\n",
       "      <td>California Ave &amp; Milwaukee Ave</td>\n",
       "      <td>13084</td>\n",
       "      <td>41.914003</td>\n",
       "      <td>-87.705099</td>\n",
       "      <td>41.922695</td>\n",
       "      <td>-87.697153</td>\n",
       "      <td>member</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ride_id  rideable_type           started_at  \\\n",
       "5860559  36DAF3C93190E07F   classic_bike  2024-12-13 15:40:06   \n",
       "5860561  71F02C3CF79B8090   classic_bike  2024-12-17 08:09:12   \n",
       "5860562  85AE8840FA0E4EAB   classic_bike  2024-12-18 08:22:40   \n",
       "5860565  15602635C5DF484E  electric_bike  2024-12-31 17:10:03   \n",
       "5860566  F15ABBA961560B75  electric_bike  2024-12-01 14:39:47   \n",
       "\n",
       "                    ended_at             start_station_name start_station_id  \\\n",
       "5860559  2024-12-13 15:46:29  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860561  2024-12-17 08:15:50  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860562  2024-12-18 08:29:25  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860565  2024-12-31 17:17:21  Albany Ave & Bloomingdale Ave            15655   \n",
       "5860566  2024-12-01 14:45:21  Albany Ave & Bloomingdale Ave            15655   \n",
       "\n",
       "                       end_station_name end_station_id  start_lat  start_lng  \\\n",
       "5860559  California Ave & Milwaukee Ave          13084  41.914027 -87.705126   \n",
       "5860561  California Ave & Milwaukee Ave          13084  41.914027 -87.705126   \n",
       "5860562  California Ave & Milwaukee Ave          13084  41.914027 -87.705126   \n",
       "5860565  California Ave & Milwaukee Ave          13084  41.914027 -87.705126   \n",
       "5860566  California Ave & Milwaukee Ave          13084  41.914003 -87.705099   \n",
       "\n",
       "           end_lat    end_lng member_casual  \n",
       "5860559  41.922695 -87.697153        member  \n",
       "5860561  41.922695 -87.697153        member  \n",
       "5860562  41.922695 -87.697153        member  \n",
       "5860565  41.922695 -87.697153        member  \n",
       "5860566  41.922695 -87.697153        member  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove null or empty cells\n",
    "\n",
    "CyclisticTripData = CyclisticTripData.dropna()\n",
    "\n",
    "CyclisticTripData.tail() #to compare with last rows observations on Data Cleaning section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b37f86fe-f973-410f-ac2c-844969a3c2f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4208188, 13)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CyclisticTripData.shape\n",
    "#previous unique observations: (5860357, 13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f01298cb-5746-4fd0-9a20-32e9653d07b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of NaN values in each column: ride_id               0\n",
      "rideable_type         0\n",
      "started_at            0\n",
      "ended_at              0\n",
      "start_station_name    0\n",
      "start_station_id      0\n",
      "end_station_name      0\n",
      "end_station_id        0\n",
      "start_lat             0\n",
      "start_lng             0\n",
      "end_lat               0\n",
      "end_lng               0\n",
      "member_casual         0\n",
      "dtype: int64\n",
      "Number of null values in each column: ride_id               0\n",
      "rideable_type         0\n",
      "started_at            0\n",
      "ended_at              0\n",
      "start_station_name    0\n",
      "start_station_id      0\n",
      "end_station_name      0\n",
      "end_station_id        0\n",
      "start_lat             0\n",
      "start_lng             0\n",
      "end_lat               0\n",
      "end_lng               0\n",
      "member_casual         0\n",
      "dtype: int64\n",
      "Number of NaN values: 0\n",
      "Number of null values: 0\n"
     ]
    }
   ],
   "source": [
    "#recheck for null or empty cells\n",
    "\n",
    "nan_count = CyclisticTripData.isna().sum().sum()\n",
    "null_count = CyclisticTripData.isnull().sum().sum()\n",
    "nan_count_column = CyclisticTripData.isna().sum()\n",
    "null_count_column = CyclisticTripData.isnull().sum()\n",
    "\n",
    "print('Number of NaN values in each column:', nan_count_column)\n",
    "print('Number of null values in each column:', null_count_column)\n",
    "print('Number of NaN values:', nan_count)\n",
    "print('Number of null values:', null_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a3568a8f-eb71-4f4b-85bc-72c6e9d0e56c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maximum character length per column: ride_id               16\n",
      "rideable_type         16\n",
      "started_at            19\n",
      "ended_at              19\n",
      "start_station_name    64\n",
      "start_station_id      14\n",
      "end_station_name      64\n",
      "end_station_id        35\n",
      "start_lat             18\n",
      "start_lng             18\n",
      "end_lat               18\n",
      "end_lng               18\n",
      "member_casual          6\n",
      "dtype: int64\n",
      "Minimum character length per column: ride_id               16\n",
      "rideable_type         12\n",
      "started_at            19\n",
      "ended_at              19\n",
      "start_station_name    10\n",
      "start_station_id       3\n",
      "end_station_name      10\n",
      "end_station_id         3\n",
      "start_lat              4\n",
      "start_lng              6\n",
      "end_lat                6\n",
      "end_lng                7\n",
      "member_casual          6\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check for consistency on number of characters across columns\n",
    "\n",
    "max_char = CyclisticTripData.astype(str).map(len).max()\n",
    "min_char = CyclisticTripData.astype(str).map(len).min()\n",
    "\n",
    "#display the results\n",
    "print('Maximum character length per column:', max_char)\n",
    "print('Minimum character length per column:', min_char)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5c7ec60-7506-4eee-ab26-0b34356d721c",
   "metadata": {},
   "source": [
    "And, finally, the uniqued values for columns _rideable_type_ and _member_casual_ can be identified."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "0a3752f4-a48a-4b6e-83b1-877539135460",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'rideable_type' values: ['electric_bike' 'classic_bike' 'electric_scooter']\n",
      "'rideable_type' total number: rideable_type\n",
      "classic_bike        2728064\n",
      "electric_bike       1432297\n",
      "electric_scooter      47827\n",
      "Name: count, dtype: int64\n",
      "'member_casual' values: ['member' 'casual']\n",
      "'member_casual' total number: member_casual\n",
      "member    2686636\n",
      "casual    1521552\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check unique values for 'rideable_type' and 'member_casual' \n",
    "\n",
    "rideable_type_unique = CyclisticTripData['rideable_type'].unique()\n",
    "rideable_type_counts = CyclisticTripData['rideable_type'].value_counts()\n",
    "member_casual_unique = CyclisticTripData['member_casual'].unique()\n",
    "member_casual_counts = CyclisticTripData['member_casual'].value_counts()\n",
    "\n",
    "print(\"'rideable_type' values:\", rideable_type_unique)\n",
    "print(\"'rideable_type' total number:\", rideable_type_counts)\n",
    "print(\"'member_casual' values:\", member_casual_unique)\n",
    "print(\"'member_casual' total number:\", member_casual_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f095bae8-ba6c-4b0c-9a07-2f3ad069833e",
   "metadata": {},
   "source": [
    "Now, the data is ready to the transform and calculation steps to know the **ride length**, **month**, **day of month**, **day of week** and **hour of the day**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "bc5da596-5429-40c9-8452-7a127e20138c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>hour</th>\n",
       "      <th>day_of_month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>month</th>\n",
       "      <th>ride_length</th>\n",
       "      <th>ride_length_seconds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>C1D650626C8C899A</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-12 15:30:27</td>\n",
       "      <td>2024-01-12 15:37:59</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.903267</td>\n",
       "      <td>-87.634737</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "      <td>Friday</td>\n",
       "      <td>January</td>\n",
       "      <td>00:07:32</td>\n",
       "      <td>452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>EECD38BDB25BFCB0</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-08 15:45:46</td>\n",
       "      <td>2024-01-08 15:52:59</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.902937</td>\n",
       "      <td>-87.634440</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>Monday</td>\n",
       "      <td>January</td>\n",
       "      <td>00:07:13</td>\n",
       "      <td>433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F4A9CE78061F17F7</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2024-01-27 12:27:19</td>\n",
       "      <td>2024-01-27 12:35:19</td>\n",
       "      <td>Wells St &amp; Elm St</td>\n",
       "      <td>KA1504000135</td>\n",
       "      <td>Kingsbury St &amp; Kinzie St</td>\n",
       "      <td>KA1503000043</td>\n",
       "      <td>41.902951</td>\n",
       "      <td>-87.634470</td>\n",
       "      <td>41.889177</td>\n",
       "      <td>-87.638506</td>\n",
       "      <td>member</td>\n",
       "      <td>12</td>\n",
       "      <td>27</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>January</td>\n",
       "      <td>00:08:00</td>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type           started_at             ended_at  \\\n",
       "0  C1D650626C8C899A  electric_bike  2024-01-12 15:30:27  2024-01-12 15:37:59   \n",
       "1  EECD38BDB25BFCB0  electric_bike  2024-01-08 15:45:46  2024-01-08 15:52:59   \n",
       "2  F4A9CE78061F17F7  electric_bike  2024-01-27 12:27:19  2024-01-27 12:35:19   \n",
       "\n",
       "  start_station_name start_station_id          end_station_name  \\\n",
       "0  Wells St & Elm St     KA1504000135  Kingsbury St & Kinzie St   \n",
       "1  Wells St & Elm St     KA1504000135  Kingsbury St & Kinzie St   \n",
       "2  Wells St & Elm St     KA1504000135  Kingsbury St & Kinzie St   \n",
       "\n",
       "  end_station_id  start_lat  start_lng    end_lat    end_lng member_casual  \\\n",
       "0   KA1503000043  41.903267 -87.634737  41.889177 -87.638506        member   \n",
       "1   KA1503000043  41.902937 -87.634440  41.889177 -87.638506        member   \n",
       "2   KA1503000043  41.902951 -87.634470  41.889177 -87.638506        member   \n",
       "\n",
       "   hour  day_of_month day_of_week    month ride_length  ride_length_seconds  \n",
       "0    15            12      Friday  January    00:07:32                  452  \n",
       "1    15             8      Monday  January    00:07:13                  433  \n",
       "2    12            27    Saturday  January    00:08:00                  480  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#add new columns hour of the day, day of the month, day of week, month and ride length with corresponding calculations and values \n",
    "\n",
    "CyclisticTripData['hour'] = pd.DatetimeIndex(CyclisticTripData[\"started_at\"]).hour\n",
    "CyclisticTripData['day_of_month'] = pd.DatetimeIndex(CyclisticTripData[\"started_at\"]).day\n",
    "CyclisticTripData['day_of_week'] = pd.DatetimeIndex(CyclisticTripData[\"started_at\"]).day_name()\n",
    "CyclisticTripData['month'] = pd.DatetimeIndex(CyclisticTripData[\"started_at\"]).month_name()\n",
    "\n",
    "CyclisticTripData['ride_length'] =  pd.to_datetime(CyclisticTripData['ended_at']) -  pd.to_datetime(CyclisticTripData['started_at'])\n",
    "CyclisticTripData['ride_length_seconds'] = CyclisticTripData['ride_length'].dt.total_seconds().astype(int)\n",
    "CyclisticTripData['ride_length'] = pd.to_datetime(CyclisticTripData['ride_length_seconds'], unit='s').dt.strftime('%H:%M:%S')\n",
    "\n",
    "CyclisticTripData.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37b033c7-7a2f-4856-8165-2a663a24fb7c",
   "metadata": {},
   "source": [
    "Next, a closer look at data in the new columns is taken to check for consistency and meaning on values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3c166024-3d59-4c33-a735-b79a082cb092",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'month' values: ['January' 'February' 'March' 'April' 'May' 'June' 'July' 'August'\n",
      " 'September' 'October' 'November' 'December']\n",
      "'day_of_week' total number: ['Friday' 'Monday' 'Saturday' 'Wednesday' 'Sunday' 'Thursday' 'Tuesday']\n",
      "minimun hour is 0 and maximum hour is 23\n",
      "minimun day of month is 1 and maximum day of month is 31\n",
      "minimun ride length is -3326 seconds and maximum ride length is 90562 seconds\n",
      "There are 213 observations with negative or zero ride length\n"
     ]
    }
   ],
   "source": [
    "#check consistency and meaning on values on the new columns\n",
    "\n",
    "month_unique = CyclisticTripData['month'].unique()\n",
    "day_of_week_unique = CyclisticTripData['day_of_week'].unique()\n",
    "hour_min = CyclisticTripData['hour'].min()\n",
    "hour_max = CyclisticTripData['hour'].max()\n",
    "day_of_month_min = CyclisticTripData['day_of_month'].min()\n",
    "day_of_month_max = CyclisticTripData['day_of_month'].max()\n",
    "ride_length_min = CyclisticTripData['ride_length_seconds'].min()\n",
    "ride_length_max = CyclisticTripData['ride_length_seconds'].max()\n",
    "\n",
    "ride_length_zeronegative = (CyclisticTripData['ride_length_seconds'] <= 0).sum().sum()\n",
    "\n",
    "\n",
    "print(\"'month' values:\", month_unique)\n",
    "print(\"'day_of_week' total number:\", day_of_week_unique)\n",
    "print(f'minimun hour is {hour_min} and maximum hour is {hour_max}')\n",
    "print(f'minimun day of month is {day_of_month_min} and maximum day of month is {day_of_month_max}')\n",
    "print(f'minimun ride length is {ride_length_min} seconds and maximum ride length is {ride_length_max} seconds')\n",
    "print(f'There are {ride_length_zeronegative} observations with negative or zero ride length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bf3719ec-7be8-4685-a092-1ca26a1497af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4207975, 19)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove rows where negative or zero ride length are observed\n",
    "\n",
    "CyclisticTripData = CyclisticTripData[CyclisticTripData['ride_length_seconds'] > 0]\n",
    "\n",
    "CyclisticTripData.shape\n",
    "#previous clean large dataset (4208188, 13)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2fcbd93-6e78-482f-bce2-f18053019aa6",
   "metadata": {},
   "source": [
    "Now, the large dataset is ready for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2a2a4f66-323a-4e77-9e85-878fcb3b7f83",
   "metadata": {},
   "outputs": [],
   "source": [
    "CyclisticTripData.to_csv('~/projects/CapstoneGoogleDACourse_January2025/2.PreparedData/20250213_CyclisticTripData.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1af3d38f-f8b7-4fdd-8c75-0cd5b12ab360",
   "metadata": {},
   "source": [
    "## Analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f010728-0d66-48a4-97f2-d04102f3bc1c",
   "metadata": {},
   "source": [
    "Once the data is prepared, processed, and stored appropriately, it's ready for analyze it to find trends or relationships and, also, we can discover some surprises in the data.\n",
    "\n",
    "This step includes conducting descriptive analysis and identifying trends and relationships.\n",
    "\n",
    "Here, I started by looking the following questions:\n",
    "- How should you organize your data to perform analysis on it?\n",
    "- Has your data been properly formatted?\n",
    "- What surprises did you discover in the data?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f68ed557-c431-4249-a692-d880bf73196c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
